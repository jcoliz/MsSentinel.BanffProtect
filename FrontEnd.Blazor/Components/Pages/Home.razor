@page "/"
@using Microsoft.Extensions.Options
@using MsSentinel.BanffProtect.FrontEnd.Options
@rendermode InteractiveServer
@inject ApiClient BackEndApi
@inject IOptions<IdentityOptions> identityOptions
@inject IOptions<LogIngestionOptions> logOptions

<PageTitle>Admin Console</PageTitle>

<h1 class="mt-3">Admin Console</h1>

<div class="row g-5">
    <div class="col-md-5 col-lg-4 order-md-last">
        <h4 class="d-flex justify-content-between align-items-center mb-3"> <span class="text-primary">Connection status</span>
            <span class="badge bg-danger rounded-pill">NO</span> </h4>
        <ul class="list-group mb-3">
            <li class="list-group-item d-flex justify-content-between lh-sm">
                <div>
                    <h6 class="my-0">Connection settings</h6> <small class="text-body-secondary">Have connection settings been set?</small>
                </div> <span class="text-body-secondary">NO</span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-sm">
                <div>
                    <h6 class="my-0">Sender status</h6> <small class="text-body-secondary">Status of log sending worker</small>
                </div> <span class="text-body-secondary">...</span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-sm">
                <div>
                    <h6 class="my-0">Response status</h6> <small class="text-body-secondary">Last HTTP response from service</small>
                </div> <span class="text-body-secondary">N/A</span>
            </li>
            <li class="list-group-item d-flex justify-content-between"> <span># Logs sent</span> <strong>0</strong>
            </li>
        </ul>
    </div>
    <div class="col-md-7 col-lg-8">
        <hr class="mb-4">
        <h4 class="mb-3">Microsoft Sentinel</h4>
        @if (Error is not null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @Error
                <button type="button" class="btn-close" aria-label="Close" @onclick="() => {Error = null;}"/>
            </div>
        }
        <form class="needs-validation" novalidate="" @onsubmit="StoreConfig">
            <div class="row g-3">
                <div class="col-12"> <label for="tenantid" class="form-label">Tenant ID</label>
                    <div class="input-group has-validation"> <span class="input-group-text">ID</span> <InputText
                            class="form-control" id="tenantid" placeholder="Tenant ID"
                            @bind-Value="Model!.TenantId"
                            />
                        <div class="invalid-feedback">
                            Tenant ID is required.
                        </div>
                    </div>
                </div>
                <div class="col-12"> <label for="appid" class="form-label">App ID</label>
                    <div class="input-group has-validation"> <span class="input-group-text">ID</span> <InputText
                            class="form-control" id="appid" placeholder="App ID"
                            @bind-Value="Model.ApplicationId"
                            />
                        <div class="invalid-feedback">
                            Application ID is required.
                        </div>
                    </div>
                </div>
                <div class="col-12"> <label for="appsecret" class="form-label">App secret</label>
                    <div class="input-group has-validation"> <span class="input-group-text">***</span> <InputText type="password"
                            class="form-control" id="appsecret" placeholder="Secret"
                            @bind-Value="Model.ApplicationSecret"
                            />
                        <div class="invalid-feedback">
                            Application secret is required.
                        </div>
                    </div>
                </div>
                <div class="col-12"> <label for="dce" class="form-label">Data collection endpoint</label>
                    <div class="input-group has-validation"> <span class="input-group-text">URL</span> <InputText type="url"
                            class="form-control" id="dce" placeholder="https://"
                            @bind-Value="Model.CollectionEndpoint"
                            />
                        <div class="invalid-feedback">
                            Endpoint URL is required.
                        </div>
                    </div>
                </div>
                <div class="col-12"> <label for="immutable" class="form-label">Data collection rule immutable ID</label>
                    <div class="input-group has-validation"> <span class="input-group-text">ID</span> <InputText
                            class="form-control" id="immutable" placeholder=""
                            @bind-Value="Model.RuleId"
                            />
                        <div class="invalid-feedback">
                            Rule ID is required.
                        </div>
                    </div>
                </div>
                <button class="w-100 btn btn-primary btn-lg mt-3" type="submit">Connect</button>
            </div>
        </form>
    </div>
</div>

@code {
//97bc9d95-3248-4943-85c5-d45fdd2053f1
    internal class ConnectorConfigurationValues
    {
        public string? TenantId { get; set; }
        public string? ApplicationId { get; set; }
        public string? ApplicationSecret { get; set; }
        public string? RuleId { get; set; }
        public string? CollectionEndpoint { get; set; }

        public ConnectorConfiguration GetOutput()
        {
            return new ConnectorConfiguration()
            {
                TenantId = Guid.Parse(TenantId ?? throw new Exception("Tenant ID is required")),
                ApplicationID = Guid.Parse(ApplicationId ?? throw new Exception("Application ID is required")),
                ApplicationSecret = ApplicationSecret ?? throw new Exception("Application secret is required"),
                RuleId = RuleId ?? throw new Exception("Rule ID is required"),
                CollectionEndpoint = new Uri(CollectionEndpoint ?? throw new Exception("Collection endpoint is required"))
            };
        }
    };

    [SupplyParameterFromForm]
    private ConnectorConfigurationValues? Model { get; set; }

    private string? Error { get; set; }

    protected override void OnInitialized()
    {
        if (Model is null)
        {
            Model = new();

            // Pull default values out of config
            if (identityOptions.Value.AppId != Guid.Empty)
            {
                Model.ApplicationId = identityOptions.Value.AppId.ToString();
            }

            if (identityOptions.Value.TenantId != Guid.Empty)
            {
                Model.TenantId = identityOptions.Value.TenantId.ToString();
            }

            if (!string.IsNullOrWhiteSpace(identityOptions.Value.AppSecret))
            {
                Model.ApplicationSecret = identityOptions.Value.AppSecret;
            }

            if (logOptions.Value.EndpointUri?.IsAbsoluteUri == true)
            {
                Model.CollectionEndpoint = logOptions.Value.EndpointUri.ToString();

            }

            if (!string.IsNullOrWhiteSpace(logOptions.Value.DcrImmutableId))
            {
                Model.RuleId = logOptions.Value.DcrImmutableId;
            }
        }
    }

    private async Task StoreConfig()
    {
        try
        {
            await BackEndApi.StoreConfigAsync(Model!.GetOutput());
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }
}