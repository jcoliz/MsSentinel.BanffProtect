@page "/"
@rendermode InteractiveServer
@inject ApiClient BackEndApi

<PageTitle>Admin Console</PageTitle>

<h1 class="mt-3">Admin Console</h1>

<div class="row g-5">
    <div class="col-md-5 col-lg-4 order-md-last">
        <h4 class="d-flex justify-content-between align-items-center mb-3"> <span class="text-primary">Connection status</span>
            <span class="badge bg-danger rounded-pill">NO</span> </h4>
        <ul class="list-group mb-3">
            <li class="list-group-item d-flex justify-content-between lh-sm">
                <div>
                    <h6 class="my-0">Connection settings</h6> <small class="text-body-secondary">Have connection settings been set?</small>
                </div> <span class="text-body-secondary">NO</span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-sm">
                <div>
                    <h6 class="my-0">Sender status</h6> <small class="text-body-secondary">Status of log sending worker</small>
                </div> <span class="text-body-secondary">...</span>
            </li>
            <li class="list-group-item d-flex justify-content-between lh-sm">
                <div>
                    <h6 class="my-0">Response status</h6> <small class="text-body-secondary">Last HTTP response from service</small>
                </div> <span class="text-body-secondary">N/A</span>
            </li>
            <li class="list-group-item d-flex justify-content-between"> <span># Logs sent</span> <strong>0</strong>
            </li>
        </ul>
    </div>
    <div class="col-md-7 col-lg-8">
        <hr class="mb-4">
        <h4 class="mb-3">Microsoft Sentinel</h4>
        <form class="needs-validation" novalidate="" @onsubmit="StoreConfig">
            <div class="row g-3">
                <div class="col-12"> <label for="tenantid" class="form-label">Tenant ID</label>
                    <div class="input-group has-validation"> <span class="input-group-text">ID</span> <InputText
                            class="form-control" id="tenantid" placeholder="Tenant ID"
                            @bind-Value="Model.TenantId"
                            />
                        <div class="invalid-feedback">
                            Tenant ID is required.
                        </div>
                    </div>
                </div>
                <div class="col-12"> <label for="appid" class="form-label">App ID</label>
                    <div class="input-group has-validation"> <span class="input-group-text">ID</span> <InputText
                            class="form-control" id="appid" placeholder="App ID"
                            @bind-Value="Model.ApplicationId"
                            />
                        <div class="invalid-feedback">
                            Application ID is required.
                        </div>
                    </div>
                </div>
                <div class="col-12"> <label for="appsecret" class="form-label">App secret</label>
                    <div class="input-group has-validation"> <span class="input-group-text">***</span> <InputText type="password"
                            class="form-control" id="appsecret" placeholder="Secret"
                            @bind-Value="Model.ApplicationSecret"
                            />
                        <div class="invalid-feedback">
                            Application secret is required.
                        </div>
                    </div>
                </div>
                <div class="col-12"> <label for="dce" class="form-label">Data collection endpoint</label>
                    <div class="input-group has-validation"> <span class="input-group-text">URL</span> <InputText type="url"
                            class="form-control" id="dce" placeholder="https://"
                            @bind-Value="Model.CollectionEndpoint"
                            />
                        <div class="invalid-feedback">
                            Endpoint URL is required.
                        </div>
                    </div>
                </div>
                <div class="col-12"> <label for="immutable" class="form-label">Data collection rule immutable ID</label>
                    <div class="input-group has-validation"> <span class="input-group-text">ID</span> <InputText
                            class="form-control" id="immutable" placeholder=""
                            @bind-Value="Model.RuleId"
                            />
                        <div class="invalid-feedback">
                            Rule ID is required.
                        </div>
                    </div>
                </div>
                <button class="w-100 btn btn-primary btn-lg mt-3" type="submit">Connect</button>
            </div>
        </form>
    </div>
</div>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h2>Metrics</h2>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2"> <button type="button" class="btn btn-sm btn-outline-secondary">Share</button>
            <button type="button" class="btn btn-sm btn-outline-secondary">Export</button> </div> <button type="button"
            class="btn btn-sm btn-outline-secondary dropdown-toggle d-flex align-items-center gap-1">
            <svg class="bi" aria-hidden="true">
                <use xlink:href="#calendar3"></use>
            </svg>
            This week
        </button>
    </div>
</div>
<canvas class="my-4 w-100" id="myChart" width="900" height="380"></canvas>
<h2>Section title</h2>
<div class="table-responsive small">
    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Header</th>
                <th scope="col">Header</th>
                <th scope="col">Header</th>
                <th scope="col">Header</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>1,001</td>
                <td>random</td>
                <td>data</td>
                <td>placeholder</td>
                <td>text</td>
            </tr>
            <tr>
                <td>1,002</td>
                <td>placeholder</td>
                <td>irrelevant</td>
                <td>visual</td>
                <td>layout</td>
            </tr>
            <tr>
                <td>1,003</td>
                <td>data</td>
                <td>rich</td>
                <td>dashboard</td>
                <td>tabular</td>
            </tr>
            <tr>
                <td>1,003</td>
                <td>information</td>
                <td>placeholder</td>
                <td>illustrative</td>
                <td>data</td>
            </tr>
            <tr>
                <td>1,004</td>
                <td>text</td>
                <td>random</td>
                <td>layout</td>
                <td>dashboard</td>
            </tr>
            <tr>
                <td>1,005</td>
                <td>dashboard</td>
                <td>irrelevant</td>
                <td>text</td>
                <td>placeholder</td>
            </tr>
            <tr>
                <td>1,006</td>
                <td>dashboard</td>
                <td>illustrative</td>
                <td>rich</td>
                <td>data</td>
            </tr>
            <tr>
                <td>1,007</td>
                <td>placeholder</td>
                <td>tabular</td>
                <td>information</td>
                <td>irrelevant</td>
            </tr>
            <tr>
                <td>1,008</td>
                <td>random</td>
                <td>data</td>
                <td>placeholder</td>
                <td>text</td>
            </tr>
            <tr>
                <td>1,009</td>
                <td>placeholder</td>
                <td>irrelevant</td>
                <td>visual</td>
                <td>layout</td>
            </tr>
            <tr>
                <td>1,010</td>
                <td>data</td>
                <td>rich</td>
                <td>dashboard</td>
                <td>tabular</td>
            </tr>
            <tr>
                <td>1,011</td>
                <td>information</td>
                <td>placeholder</td>
                <td>illustrative</td>
                <td>data</td>
            </tr>
            <tr>
                <td>1,012</td>
                <td>text</td>
                <td>placeholder</td>
                <td>layout</td>
                <td>dashboard</td>
            </tr>
            <tr>
                <td>1,013</td>
                <td>dashboard</td>
                <td>irrelevant</td>
                <td>text</td>
                <td>visual</td>
            </tr>
            <tr>
                <td>1,014</td>
                <td>dashboard</td>
                <td>illustrative</td>
                <td>rich</td>
                <td>data</td>
            </tr>
            <tr>
                <td>1,015</td>
                <td>random</td>
                <td>tabular</td>
                <td>information</td>
                <td>text</td>
            </tr>
        </tbody>
    </table>
</div>

@code {
//97bc9d95-3248-4943-85c5-d45fdd2053f1
    internal class ConnectorConfigurationValues
    {
        public string? TenantId { get; set; }
        public string? ApplicationId { get; set; }
        public string? ApplicationSecret { get; set; }
        public string? RuleId { get; set; }
        public string? CollectionEndpoint { get; set; }

        public ConnectorConfiguration GetOutput()
        {
            return new ConnectorConfiguration()
            {
                TenantId = Guid.Parse(TenantId ?? throw new Exception("Tenant ID is required")),
                ApplicationID = Guid.Parse(ApplicationId ?? throw new Exception("Application ID is required")),
                ApplicationSecret = ApplicationSecret ?? throw new Exception("Application secret is required"),
                RuleId = RuleId ?? throw new Exception("Rule ID is required"),
                CollectionEndpoint = new Uri(CollectionEndpoint ?? throw new Exception("Collection endpoint is required"))
            };
        }
    };

    [SupplyParameterFromForm]
    private ConnectorConfigurationValues? Model { get; set; }

    private string? Error { get; set; }

    protected override void OnInitialized() => Model ??= new();

    private async Task StoreConfig()
    {
        try
        {
            await BackEndApi.StoreConfigAsync(Model!.GetOutput());
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }
}